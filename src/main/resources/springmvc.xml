<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/context
       https://www.springframework.org/schema/context/spring-context.xsd
       http://www.springframework.org/schema/mvc
       https://www.springframework.org/schema/mvc/spring-mvc.xsd">

    <!-- 声明组件扫描器 -->
    <context:component-scan base-package="com.hz.controller"/>

    <!-- 视图解析器 -->
    <!--<bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
        <property name="prefix" value="/WEB-INF/view/" />
        <property name="suffix" value=".jsp"/>
    </bean>-->

    <!-- 设置注解驱动，使得@ResponseBody注解生效 -->
    <!-- default-servlet-handler 与 @RequestMapping 有冲突 （即不加注解驱动，处理不了 .do 的请求）需要加入annotation-driven 解决冲突
         resources 与 @RequestMapping 有冲突 （即不加注解驱动，处理不了 .do 的请求）需要加入annotation-driven 解决冲突-->
    <mvc:annotation-driven/>

    <!-- 第一种处理静态资源的方式:
         需要在 springmvcl配置文件加入<mvc:default- servlet- handler>
         原理是：加入这个标签后，框架会创健控制器对象Defaultservlethttprequesthandler（类似我们自己创建的MyController）
         这个对象可以把接收的请求转发给tomcat的default这个servlet -->
    <!--<mvc:default-servlet-handler/>-->

     <!-- 第二种处理静态资源的方式mvc:
          resources加入后框架会创建Resourcehttprequesthandler这个处理器对象。
          让这个对象处理静态资源的访问，不依赖 tomcat服务器。
          mapping: 访问静态资源的uri地址，使用通配符 **
          location：静态资源在项目中的位置-->
    <!--<mvc:resources mapping="imgs/**" location="/imgs/"/>
    <mvc:resources mapping="js/**" location="/js/"/>
    <mvc:resources mapping="html/**" location="/html/"/>-->

    <!-- 一条配置解决上面的问题 将所有的静态文件放一个文件夹 static
         好处就是可以直接使用请求 不需要加后缀 .do -->
    <mvc:resources mapping="static/**" location="/static/"/>

</beans>